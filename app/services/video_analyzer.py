import os
import json
import tempfile
import librosa
import requests
from typing import Dict, Any
from yt_dlp import YoutubeDL
from whisper import load_model

class VideoAnalyzer:
    def __init__(self):
        self.mistral_api_key = os.getenv("MISTRAL_API_KEY")
        self.mistral_api_url = "https://api.mistral.ai/v1/chat/completions"
        
        # –î–æ–±–∞–≤–ª—è–µ–º FFmpeg –≤ PATH
        ffmpeg_path = r'C:\ffmpeg\bin'
        if ffmpeg_path not in os.environ['PATH']:
            os.environ['PATH'] = ffmpeg_path + os.pathsep + os.environ['PATH']
        
        if self.mistral_api_key and self.mistral_api_key != "your-mistral-api-key-here":
            print("‚úÖ Mistral AI client initialized successfully")
        else:
            print("‚ùå Mistral API key not found or not configured")
    
    def _get_video_info(self, video_url: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        """
        try:
            ydl_opts = {
                'quiet': True,
                'cookiefile': 'cookies.txt',
            }
            
            with YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=False)
                return {
                    'title': info.get('title', 'Unknown Title'),
                    'uploader': info.get('uploader', 'Unknown Uploader'),
                    'duration': info.get('duration', 0),
                    'thumbnail': info.get('thumbnail', ''),
                    'view_count': info.get('view_count', 0),
                    'description': info.get('description', ''),
                    'success': True
                }
        except Exception as e:
            print(f"‚ùå Error getting video info: {e}")
            return {
                'title': 'Unknown Title',
                'uploader': 'Unknown Uploader',
                'duration': 0,
                'thumbnail': '',
                'view_count': 0,
                'success': False
            }
    
    def analyze_video_suitability(self, video_url: str, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∞—É–¥–∏–æ
        """
        print(f"üîç Analyzing video: {video_url}")
        print(f"üìä User preferences: {user_preferences}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = self._get_video_info(video_url)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤–∏–¥–µ–æ
        print("üéµ Starting audio transcription...")
        transcription_result = self._download_and_transcribe_audio(video_url)
        
        if not transcription_result.get('success', False):
            error_msg = f"Failed to transcribe audio: {transcription_result.get('error')}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'is_suitable': False,
                'video_info': video_info  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            }
        
        transcription = transcription_result['transcription']
        print(f"üìù Transcription completed ({len(transcription)} characters)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Mistral AI
        mistral_result = self._analyze_with_mistral(transcription, user_preferences, video_url)
        if mistral_result:
            print("‚úÖ Using Mistral AI analysis")
            return {
                'success': True,
                'video_info': video_info,
                'transcription_preview': transcription[:500] + "..." if len(transcription) > 500 else transcription,
                'word_count': len(transcription.split()),
                'analysis': mistral_result,
                'is_suitable': mistral_result.get('is_suitable', False)
            }
        
        # Fallback –∞–Ω–∞–ª–∏–∑
        print("üîÑ Using fallback analysis")
        fallback_result = self._fallback_analysis(transcription, user_preferences)
        return {
            'success': True,
            'video_info': video_info,
            'transcription_preview': transcription[:500] + "..." if len(transcription) > 500 else transcription,
            'word_count': len(transcription.split()),
            'analysis': fallback_result,
            'is_suitable': fallback_result.get('is_suitable', False)
        }
    
    def _download_and_transcribe_audio(self, url: str) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –µ–≥–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
            with tempfile.TemporaryDirectory() as temp_dir:
                audio_path = os.path.join(temp_dir, "audio.%(ext)s")
                
                ydl_opts = {
                    'quiet': True,
                    'format': 'bestaudio/best',
                    'cookiefile': 'cookies.txt',
                    'ffmpeg_location': r'C:\ffmpeg\bin',
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }],
                    'outtmpl': audio_path,
                }
                
                print("üì• Downloading audio...")
                with YoutubeDL(ydl_opts) as ydl:
                    ydl.download([url])
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                final_audio_path = None
                for file in os.listdir(temp_dir):
                    if file.startswith("audio."):
                        final_audio_path = os.path.join(temp_dir, file)
                        break
                
                if not final_audio_path:
                    return {
                        'success': False,
                        'error': "Audio file was not created"
                    }
                
                print(f"üîä Found audio file: {final_audio_path}")
                print("üé§ Transcribing audio...")
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                audio, sr = librosa.load(final_audio_path, sr=16000)
                model = load_model('base')
                transcription = model.transcribe(audio)
                
                return {
                    'success': True,
                    'transcription': transcription['text'],
                    'language': transcription.get('language', 'unknown')
                }
                
        except Exception as e:
            print(f"‚ùå Audio transcription failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def _analyze_with_mistral(self, transcription: str, user_preferences: Dict[str, Any], video_url: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Mistral AI
        """
        if not self.mistral_api_key or self.mistral_api_key == "your-mistral-api-key-here":
            return None
        
        try:
            prompt = self._build_mistral_prompt(transcription, user_preferences)
            
            headers = {
                "Authorization": f"Bearer {self.mistral_api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "mistral-medium",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 1000,
                "response_format": {"type": "json_object"}
            }
            
            print("üöÄ Sending request to Mistral AI...")
            response = requests.post(self.mistral_api_url, headers=headers, json=payload, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                analysis_text = result['choices'][0]['message']['content']
                print(f"üìù Mistral AI response received")
                
                parsed_result = self._parse_mistral_response(analysis_text)
                if parsed_result:
                    print(f"‚úÖ Mistral analysis completed: suitable={parsed_result.get('is_suitable')}, score={parsed_result.get('match_score')}")
                    return parsed_result
            else:
                print(f"‚ùå Mistral API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Mistral AI analysis failed: {e}")
            return None
    
    def _build_mistral_prompt(self, transcription: str, user_preferences: Dict[str, Any]) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        # –û–±—Ä–µ–∑–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
        max_transcription_length = 4000
        if len(transcription) > max_transcription_length:
            transcription = transcription[:max_transcription_length] + "... [—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω]"
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = user_preferences.get('preferred_categories', [])
        user_languages = user_preferences.get('preferred_languages', ['—Ä—É—Å—Å–∫–∏–π'])
        educational_pref = user_preferences.get('educational_preference', False)
        entertainment_pref = user_preferences.get('entertainment_preference', True)
        exclude_explicit = user_preferences.get('exclude_explicit_content', False)
        min_content_length = user_preferences.get('min_content_length', 100)
        
        word_count = len(transcription.split())
        
        prompt = f"""
        –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç YouTube –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        === –¢–†–ê–ù–°–ö–†–ò–ë–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢ –í–ò–î–ï–û ===
        {transcription}

        === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê ===
        –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}

        === –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        –ñ–ï–õ–ê–ï–ú–´–ï –¢–ï–ú–ê–¢–ò–ö–ò: {user_categories}
        –ü–†–ï–î–ü–û–ß–¢–ò–¢–ï–õ–¨–ù–´–ï –Ø–ó–´–ö–ò: {user_languages}
        –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –û–ë–™–ï–ú –ö–û–ù–¢–ï–ù–¢–ê: {min_content_length} —Å–ª–æ–≤
        –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if educational_pref else "–ù–ï–¢"}
        –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if entertainment_pref else "–ù–ï–¢"}
        –ò–°–ö–õ–Æ–ß–ê–¢–¨ –Ø–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if exclude_explicit else "–ù–ï–¢"}

        === –ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê ===
        1. –°–û–î–ï–†–ñ–ê–¢–ï–õ–¨–ù–û–°–¢–¨: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞? –ú–∏–Ω–∏–º—É–º {min_content_length} —Å–ª–æ–≤
        2. –¢–ï–ú–ê–¢–ò–ö–ê: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∂–µ–ª–∞–µ–º—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º?
        3. –¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º?
        4. –Ø–ó–´–ö: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —è–∑—ã–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º —è–∑—ã–∫–∞–º?
        5. –ö–ê–ß–ï–°–¢–í–û: –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —è–≤–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?

        === –¢–†–ï–ë–£–ï–ú–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê ===
        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

        {{
            "is_suitable": true/false,
            "analysis": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
            "confidence": 0.85,
            "reasons": [
                "–ü—Ä–∏—á–∏–Ω–∞ 1",
                "–ü—Ä–∏—á–∏–Ω–∞ 2", 
                "–ü—Ä–∏—á–∏–Ω–∞ 3"
            ],
            "match_score": 85,
            "detected_topics": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
            "content_type": "educational/entertainment/mixed/unknown",
            "language_detected": "—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–¥—Ä—É–≥–æ–π"
        }}

        –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        
        return prompt
    
    def _parse_mistral_response(self, response_text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI
        """
        try:
            clean_text = response_text.strip()
            result = json.loads(clean_text)
            
            required_fields = ['is_suitable', 'analysis', 'confidence', 'reasons', 'match_score']
            if all(field in result for field in required_fields):
                if (isinstance(result['is_suitable'], bool) and
                    isinstance(result['analysis'], str) and
                    isinstance(result['confidence'], (int, float)) and
                    isinstance(result['reasons'], list) and
                    isinstance(result['match_score'], (int, float))):
                    
                    result['confidence'] = max(0.0, min(1.0, float(result['confidence'])))
                    result['match_score'] = max(0, min(100, int(result['match_score'])))
                    
                    if 'detected_topics' not in result:
                        result['detected_topics'] = []
                    if 'content_type' not in result:
                        result['content_type'] = 'unknown'
                    if 'language_detected' not in result:
                        result['language_detected'] = 'unknown'
                    
                    return result
            
            print(f"‚ùå Invalid response format from Mistral: {result}")
            return None
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Failed to parse JSON response from Mistral: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Error parsing Mistral response: {e}")
            return None
    
    def _fallback_analysis(self, transcription: str, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ Mistral –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        transcription_lower = transcription.lower()
        word_count = len(transcription.split())
        
        score = 50
        reasons = []
        detected_topics = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        min_content_length = user_preferences.get('min_content_length', 100)
        if word_count < min_content_length:
            score -= 30
            reasons.append(f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({word_count} —Å–ª–æ–≤)")
        else:
            score += 10
            reasons.append(f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({word_count} —Å–ª–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏–∫
        preferred_categories = user_preferences.get('preferred_categories', [])
        if preferred_categories:
            category_matches = []
            for category in preferred_categories:
                if category.lower() in transcription_lower:
                    category_matches.append(category)
                    detected_topics.append(category)
            
            if category_matches:
                score += 20
                reasons.append(f"–ù–∞–π–¥–µ–Ω—ã —Ç–µ–º–∞—Ç–∏–∫–∏: {', '.join(category_matches)}")
            else:
                score -= 15
                reasons.append("–¢–µ–º–∞—Ç–∏–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —è–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if user_preferences.get('exclude_explicit_content', False):
            explicit_keywords = ['–º–∞—Ç', '—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '–ø–æ—Ä–Ω–æ', '—Å–µ–∫—Å', '–Ω–∞—Å–∏–ª–∏–µ']
            explicit_found = any(keyword in transcription_lower for keyword in explicit_keywords)
            if explicit_found:
                score -= 40
                reasons.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        educational_keywords = ['–æ–±—É—á–µ–Ω–∏–µ', '—É—Ä–æ–∫', '–∫—É—Ä—Å', '–ª–µ–∫—Ü–∏—è', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
        entertainment_keywords = ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', '—é–º–æ—Ä', '—Å–º–µ—Ö', '–ø—Ä–∏–∫–æ–ª', '–∫–æ–º–µ–¥–∏—è']
        
        edu_count = sum(1 for kw in educational_keywords if kw in transcription_lower)
        ent_count = sum(1 for kw in entertainment_keywords if kw in transcription_lower)
        
        if edu_count > ent_count:
            content_type = "educational"
            if user_preferences.get('educational_preference', False):
                score += 15
        elif ent_count > edu_count:
            content_type = "entertainment"
            if user_preferences.get('entertainment_preference', True):
                score += 15
        else:
            content_type = "mixed"
        
        is_suitable = score >= 60
        
        return {
            'is_suitable': is_suitable,
            'analysis': f"Fallback –∞–Ω–∞–ª–∏–∑: –∫–æ–Ω—Ç–µ–Ω—Ç {'—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' if is_suitable else '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç'} –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º",
            'confidence': 0.5,
            'reasons': reasons,
            'match_score': max(0, min(100, score)),
            'detected_topics': detected_topics,
            'content_type': content_type,
            'language_detected': 'russian'
        }