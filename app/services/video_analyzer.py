import os
import json
from typing import Dict, Any
import yt_dlp
import requests

class VideoAnalyzer:
    def __init__(self):
        self.mistral_api_key = os.getenv("MISTRAL_API_KEY")
        self.mistral_api_url = "https://api.mistral.ai/v1/chat/completions"
        
        if self.mistral_api_key and self.mistral_api_key != "your-mistral-api-key-here":
            print("‚úÖ Mistral AI client initialized successfully")
        else:
            print("‚ùå Mistral API key not found or not configured")
    
    def extract_video_info(self, video_url: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å YouTube
        """
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
        }
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=False)
                
                return {
                    'title': info.get('title', ''),
                    'description': info.get('description', ''),
                    'duration': info.get('duration', 0),
                    'uploader': info.get('uploader', ''),
                    'view_count': info.get('view_count', 0),
                    'categories': info.get('categories', []),
                    'tags': info.get('tags', []),
                    'thumbnail': info.get('thumbnail', ''),
                    'success': True
                }
        except Exception as e:
            print(f"‚ùå Error extracting video info: {e}")
            return {
                'title': 'Unknown',
                'description': '',
                'duration': 0,
                'uploader': 'Unknown',
                'view_count': 0,
                'categories': [],
                'tags': [],
                'thumbnail': '',
                'success': False,
                'error': str(e)
            }
    
    def analyze_video_suitability(self, video_url: str, user_preferences: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print(f"üîç Analyzing video: {video_url}")
        print(f"üìä User preferences: {user_preferences}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        video_info = self.extract_video_info(video_url)
        if not video_info.get('success', False):
            error_msg = f"Failed to extract video info: {video_info.get('error')}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'is_suitable': False
            }
        
        print(f"üìπ Video info extracted: {video_info['title']}")
        
        # –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Mistral AI
        mistral_result = self._analyze_with_mistral(video_info, user_preferences)
        if mistral_result:
            print("‚úÖ Using Mistral AI analysis")
            return {
                'success': True,
                'video_info': video_info,
                'analysis': mistral_result,
                'is_suitable': mistral_result.get('is_suitable', False)
            }
        
        # –ï—Å–ª–∏ Mistral –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback –∞–Ω–∞–ª–∏–∑
        print("üîÑ Using improved fallback analysis")
        fallback_result = self._improved_fallback_analysis(video_info, user_preferences)
        return {
            'success': True,
            'video_info': video_info,
            'analysis': fallback_result,
            'is_suitable': fallback_result.get('is_suitable', False)
        }
    
    def _analyze_with_mistral(self, video_info: Dict[str, Any], user_preferences: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Mistral AI
        """
        if not self.mistral_api_key or self.mistral_api_key == "your-mistral-api-key-here":
            return None
        
        try:
            prompt = self._build_mistral_prompt(video_info, user_preferences)
            
            headers = {
                "Authorization": f"Bearer {self.mistral_api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "mistral-medium",  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mistral-small, mistral-medium, mistral-large-latest
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 1000,
                "response_format": {"type": "json_object"}
            }
            
            print("üöÄ Sending request to Mistral AI...")
            response = requests.post(self.mistral_api_url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                analysis_text = result['choices'][0]['message']['content']
                print(f"üìù Mistral AI response received")
                
                parsed_result = self._parse_mistral_response(analysis_text)
                if parsed_result:
                    print(f"‚úÖ Mistral analysis completed: suitable={parsed_result.get('is_suitable')}, score={parsed_result.get('match_score')}")
                    return parsed_result
            else:
                print(f"‚ùå Mistral API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Mistral AI analysis failed: {e}")
            return None
    
    def _build_mistral_prompt(self, video_info: Dict[str, Any], user_preferences: Dict[str, Any]) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral AI
        """
        video_title = video_info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        video_description = video_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:800]
        duration_minutes = video_info.get('duration', 0) // 60
        uploader = video_info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        categories = video_info.get('categories', [])
        tags = video_info.get('tags', [])[:20]
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = user_preferences.get('preferred_categories', [])
        user_languages = user_preferences.get('preferred_languages', [])
        min_duration = user_preferences.get('min_duration_minutes', 0)
        max_duration = user_preferences.get('max_duration_minutes', 120)
        educational_pref = user_preferences.get('educational_preference', False)
        entertainment_pref = user_preferences.get('entertainment_preference', True)
        exclude_explicit = user_preferences.get('exclude_explicit_content', False)
        
        prompt = f"""
        –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ YouTube –≤–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ò–î–ï–û ===
        –ù–ê–ó–í–ê–ù–ò–ï: "{video_title}"
        –ê–í–¢–û–†: {uploader}
        –û–ü–ò–°–ê–ù–ò–ï: {video_description}
        –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {duration_minutes} –º–∏–Ω—É—Ç
        –ö–ê–¢–ï–ì–û–†–ò–ò: {categories}
        –¢–ï–ì–ò: {tags}

        === –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        –ñ–ï–õ–ê–ï–ú–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò: {user_categories}
        –ü–†–ï–î–ü–û–ß–¢–ò–¢–ï–õ–¨–ù–´–ï –Ø–ó–´–ö–ò: {user_languages}
        –î–ò–ê–ü–ê–ó–û–ù –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò: {min_duration}-{max_duration} –º–∏–Ω—É—Ç
        –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if educational_pref else "–ù–ï–¢"}
        –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if entertainment_pref else "–ù–ï–¢"}
        –ò–°–ö–õ–Æ–ß–ê–¢–¨ –Ø–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢: {"–î–ê" if exclude_explicit else "–ù–ï–¢"}

        === –ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê ===
        1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –≤–∏–¥–µ–æ –∂–µ–ª–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É  
        3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π/—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π) –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
        4. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º —è–∑—ã–∫–∞–º
        5. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —è–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Ö–æ—á–µ—Ç)

        === –¢–†–ï–ë–£–ï–ú–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê ===
        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

        {{
            "is_suitable": true/false,
            "analysis": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û–±—ä—è—Å–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ—á–µ–º—É –≤–∏–¥–µ–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –£–∫–∞–∂–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.",
            "confidence": 0.85,
            "reasons": [
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ 1",
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ 2", 
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ 3"
            ],
            "match_score": 85
        }}

        –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏.
        –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–µ–≥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        """
        
        return prompt
    
    def _parse_mistral_response(self, response_text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI
        """
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            clean_text = response_text.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            result = json.loads(clean_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['is_suitable', 'analysis', 'confidence', 'reasons', 'match_score']
            if all(field in result for field in required_fields):
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                if (isinstance(result['is_suitable'], bool) and
                    isinstance(result['analysis'], str) and
                    isinstance(result['confidence'], (int, float)) and
                    isinstance(result['reasons'], list) and
                    isinstance(result['match_score'], (int, float))):
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    result['confidence'] = max(0.0, min(1.0, float(result['confidence'])))
                    result['match_score'] = max(0, min(100, int(result['match_score'])))
                    
                    return result
            
            print(f"‚ùå Invalid response format from Mistral: {result}")
            return None
            
        except json.JSONDecodeError as e:
            print(f"‚ùå Failed to parse JSON response from Mistral: {e}")
            print(f"üìÑ Response was: {response_text}")
            return None
        except Exception as e:
            print(f"‚ùå Error parsing Mistral response: {e}")
            return None
    
    def _improved_fallback_analysis(self, video_info: Dict[str, Any], user_preferences: Dict[str, Any]) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–≥–¥–∞ Mistral AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        duration_minutes = video_info.get('duration', 0) / 60
        video_title = video_info.get('title', '').lower()
        video_description = video_info.get('description', '').lower()
        full_text = f"{video_title} {video_description}"
        
        reasons = []
        positive_aspects = []
        match_score = 100
        detailed_analysis = []
        
        # 1. –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        min_duration = user_preferences.get('min_duration_minutes', 0)
        max_duration = user_preferences.get('max_duration_minutes', 120)
        
        if duration_minutes < min_duration:
            reasons.append(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ({duration_minutes:.1f}–º–∏–Ω < {min_duration}–º–∏–Ω)")
            match_score -= 25
            detailed_analysis.append(f"‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        elif duration_minutes > max_duration:
            reasons.append(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration_minutes:.1f}–º–∏–Ω > {max_duration}–º–∏–Ω)")
            match_score -= 25
            detailed_analysis.append(f"‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        else:
            positive_aspects.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç")
            detailed_analysis.append(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ–¥—Ö–æ–¥–∏—Ç ({duration_minutes:.1f}–º–∏–Ω)")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ–º–∞—Ç–∏–∫–∏
        preferred_categories = [cat.lower() for cat in user_preferences.get('preferred_categories', [])]
        
        category_keywords = {
            'python': ['python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'programming', '–∞–ª–≥–æ—Ä–∏—Ç–º'],
            'javascript': ['javascript', 'js', 'web', 'frontend', 'node', 'react', 'vue'],
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', 'coding', 'software'],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['—É—Ä–æ–∫', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'tutorial', '–ª–µ–∫—Ü–∏—è', '—É—á–µ–±–∞', 'education'],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–≥–∞–¥–∂–µ—Ç—ã', 'it', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–∏–∫–∞', 'tech', 'technology'],
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '—é–º–æ—Ä', '–ø—Ä–∏–∫–æ–ª', 'funny', 'comedy', '—Å–º–µ—Ö', '—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π', 'entertainment'],
            '–º—É–∑—ã–∫–∞': ['–º—É–∑—ã–∫–∞', '–ø–µ—Å–Ω—è', '–∫–ª–∏–ø', 'music', '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π', 'concert', 'audio'],
            '–∏–≥—Ä—ã': ['–∏–≥—Ä—ã', '–≥–µ–π–º–∏–Ω–≥', 'game', '–∏–≥—Ä–æ–≤–æ–π', 'gaming', 'play', 'video game'],
            '–∫—É–ª–∏–Ω–∞—Ä–∏—è': ['—Ä–µ—Ü–µ–ø—Ç', '–≥–æ—Ç–æ–≤–∫–∞', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '–µ–¥–∞', 'cooking', 'recipe', 'food'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ç—É—Ä–∏–∑–º', '–ø–æ–µ–∑–¥–∫–∞', 'travel', 'trip', 'tour'],
            '—Å–ø–æ—Ä—Ç': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ñ–∏—Ç–Ω–µ—Å', 'sport', 'workout', 'exercise'],
            '–Ω–∞—É–∫–∞': ['–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 'scientific', 'science', 'research'],
            '–±–∏–∑–Ω–µ—Å': ['–±–∏–∑–Ω–µ—Å', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 'business', 'entrepreneur'],
            '–Ω–æ–≤–æ—Å—Ç–∏': ['–Ω–æ–≤–æ—Å—Ç–∏', 'news', '—Å–æ–±—ã—Ç–∏—è', '–ø–æ–ª–∏—Ç–∏–∫–∞']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_match = False
        matched_categories = []
        for user_cat in preferred_categories:
            if user_cat in category_keywords:
                keywords = category_keywords[user_cat]
                for keyword in keywords:
                    if keyword in full_text:
                        category_match = True
                        matched_categories.append(user_cat)
                        detailed_analysis.append(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{user_cat}' (–Ω–∞–π–¥–µ–Ω–æ '{keyword}')")
                        break
                if category_match:
                    break
        
        if category_match and matched_categories:
            positive_aspects.append(f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(matched_categories)}")
        elif preferred_categories:
            reasons.append("–¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
            match_score -= 30
            detailed_analysis.append(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º {preferred_categories}")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ/—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        educational_pref = user_preferences.get('educational_preference', False)
        entertainment_pref = user_preferences.get('entertainment_preference', True)
        
        educational_keywords = ['—É—Ä–æ–∫', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'tutorial', '–ª–µ–∫—Ü–∏—è', '—É—á–µ–±–∞', '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ', 'how to', 'study', 'learn']
        entertainment_keywords = ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '—é–º–æ—Ä', '–ø—Ä–∏–∫–æ–ª', 'funny', 'comedy', '—Å–º–µ—Ö', '—à—É—Ç–∫–∞', '—Ä–æ–∑—ã–≥—Ä—ã—à', 'entertainment', 'fun', 'laugh']
        
        has_educational = any(keyword in full_text for keyword in educational_keywords)
        has_entertainment = any(keyword in full_text for keyword in entertainment_keywords)
        
        content_type_analysis = []
        
        if educational_pref:
            if has_educational:
                positive_aspects.append("–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                content_type_analysis.append("‚úÖ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: –¥–∞")
            else:
                reasons.append("–ù–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                match_score -= 20
                content_type_analysis.append("‚ùå –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: –Ω–µ—Ç")
        
        if entertainment_pref:
            if has_entertainment:
                positive_aspects.append("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                content_type_analysis.append("‚úÖ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π: –¥–∞")
            else:
                reasons.append("–ù–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                match_score -= 20
                content_type_analysis.append("‚ùå –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π: –Ω–µ—Ç")
        
        detailed_analysis.extend(content_type_analysis)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–∞
        preferred_languages = user_preferences.get('preferred_languages', [])
        russian_keywords = ['–≤', '–Ω–∞', '—Å', '–ø–æ', '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '–¥–ª—è', '–∏–ª–∏', '–Ω–æ', '–µ—Å–ª–∏', '—Ä—É—Å—Å–∫', '—Ä–æ—Å—Å–∏']
        english_keywords = ['the', 'and', 'for', 'with', 'this', 'that', 'what', 'how', 'why', 'when', 'english', 'eng']
        
        has_russian = any(keyword in full_text for keyword in russian_keywords)
        has_english = any(keyword in full_text for keyword in english_keywords)
        
        language_ok = False
        language_analysis = []
        
        if 'ru' in preferred_languages and has_russian:
            language_ok = True
            positive_aspects.append("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")
            language_analysis.append("‚úÖ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π")
        elif 'ru' in preferred_languages and not has_russian:
            language_analysis.append("‚ùå –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        if 'en' in preferred_languages and has_english:
            language_ok = True
            positive_aspects.append("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
            language_analysis.append("‚úÖ –Ø–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        elif 'en' in preferred_languages and not has_english:
            language_analysis.append("‚ùå –Ø–∑—ã–∫: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        if preferred_languages and not language_ok:
            reasons.append("–Ø–∑—ã–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
            match_score -= 15
        
        detailed_analysis.extend(language_analysis)
        
        # 5. –§–∏–ª—å—Ç—Ä —è–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if user_preferences.get('exclude_explicit_content', False):
            explicit_keywords = ['18+', '—ç—Ä–æ—Ç–∏–∫–∞', '—Å–µ–∫—Å', 'porn', 'xxx', 'adult', 'nsfw', '–Ω–∞–≥–æ—Ç–∞', '–∏–Ω—Ç–∏–º', 'explicit']
            if any(keyword in full_text for keyword in explicit_keywords):
                reasons.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω —è–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                match_score = 0
                detailed_analysis.append("üö´ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω —è–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            else:
                detailed_analysis.append("‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —è–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
        is_suitable = match_score >= 60
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_text = f"–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ '{video_info['title']}':\n"
        analysis_text += "\n".join(detailed_analysis)
        
        if positive_aspects:
            analysis_text += f"\n\nüìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:\n" + "\n".join([f"‚Ä¢ {aspect}" for aspect in positive_aspects])
        
        if reasons:
            analysis_text += f"\n\nüìâ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:\n" + "\n".join([f"‚Ä¢ {reason}" for reason in reasons])
        
        analysis_text += f"\n\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–û–î–•–û–î–ò–¢' if is_suitable else '–ù–ï –ü–û–î–•–û–î–ò–¢'} (–æ—Ü–µ–Ω–∫–∞: {match_score}%)"
        
        if not reasons:
            reasons = ["–í–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º"]
        
        return {
            "is_suitable": is_suitable,
            "analysis": analysis_text,
            "confidence": max(0.0, min(1.0, match_score / 100)),
            "reasons": reasons,
            "match_score": max(0, min(100, match_score))
        }